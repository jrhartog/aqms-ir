#!/usr/bin/env python
from __future__ import print_function

import argparse
import datetime
import logging
import sys

from obspy import read_inventory
from obspy import UTCDateTime

from sqlalchemy import engine_from_config
from sqlalchemy.orm import sessionmaker

from aqms_ir.configure import configure
from aqms_ir.inv2schema import inventory2db, print_metrics
from aqms_ir.schema import Base

# Global scope: start the engine and bind a Session factory to it
    
# create configured engine instance
global engine 
engine = engine_from_config(configure(), prefix='sqlalchemy.')

# create a configured "Session" class
Session = sessionmaker(bind=engine)

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Reads FDSN StationXML    \
        and populates (PostgreSQL) AQMS tables station_data, channel_data, \
        simple_response, channelmap_ampparms, channelmap_codaparms, and    \
        associated dictionary tables (d_abbreviation, d_unit, d_format).   \
        Database connection parameters have to be set with environment     \
        variables DB_NAME, DB_HOST, DB_PORT, DB_USER, and optionally,     \
        DB_PASSWORD. \
        The tables will be created if they do not exist yet. \
        Alternatively it can be run with the -f flag to save the meta-data to a \
        StationXML file instead. Logs are written to inventory2aqms.log. \
        See https://github.com/pnsn/aqms_ir") 

    # required argument
    help_text = "Specify name of FDSN StationXML file"
    parser.add_argument("xmlfile",help=help_text)

    # optional argument
    help_text = "Be more verbose in logfile"
    parser.add_argument("-v","--verbose",help=help_text,action="store_true")
    help_text = "Add currently active channels only"
    parser.add_argument("-a","--active",help=help_text,action="store_true")
    help_text = "Load all SOH channels, default is '[BEHS][HLN][123ENZ]' (ignored when -c is provided)"
    parser.add_argument("-i", "--inclusive", help=help_text, action="store_true")
    help_text = "Specify a station code, wildcards are allowed"
    parser.add_argument("-s","--station",help=help_text)
    help_text = "Specify a channel code, wildcards are allowed"
    parser.add_argument("-c","--channel",help=help_text)
    help_text = "Specify a location code, wildcards are allowed"
    parser.add_argument("-l","--location",help=help_text)

    args = parser.parse_args()
    active_flag = False
    inclusive = False

    # possible keyword arguments to use in select
    kwargs = {}
    if args.station:
        kwargs["station"] = args.station
    if args.channel:
        kwargs["channel"] = args.channel
    if args.location:
        kwargs["location"] = args.location
    if args.active:
        active_flag=True
    if not args.inclusive and not args.channel:
        # unless otherwise specified, restrict to seismic channels
        kwargs["channel"] = '[BEHS][HNL][123ENZ]'

    logfile = "loadStationXML_{}.log".format(datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S'))
    logging.basicConfig(filename=logfile, level=logging.WARNING)
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)

    logging.getLogger('sqlalchemy.engine').setLevel(logging.WARNING)
    
    # This command will create the database tables if they do not exist yet.
    Base.metadata.create_all(engine)

    tmpinv = read_inventory(args.xmlfile, format="STATIONXML")
    if len(kwargs) > 0:
        logging.debug("select parameters: {}".format(kwargs))
        inv = tmpinv.select(**kwargs)
    else:
        inv = tmpinv

    session = Session()
    inventory2db(session,inv,active=active_flag)
    session.close()

    print(inv)
    if args.active:
        print("(Only loaded active channels)")
    print("\nDatabase Loading Metrics:\n")
    status = print_metrics(bad_only=False, abbreviated=True)
    
    sys.exit(status)

